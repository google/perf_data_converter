// Copyright 2018 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef PERF_DATA_CONVERTER_SRC_QUIPPER_HEAP_PROFILE_PARSER_H_
#define PERF_DATA_CONVERTER_SRC_QUIPPER_HEAP_PROFILE_PARSER_H_

#include <memory>
#include <string>
#include <vector>

#include "google/protobuf/repeated_field.h"
#include "compat/proto.h"
#include "kernel/perf_event.h"
#include "kernel/perf_internals.h"
#include "perf_serializer.h"
#include "re2/re2.h"
#include "re2/stringpiece.h"

namespace quipper {

/*
 * HeapProfileParser reads a raw text heap profile generated by gperftools
 * tcmalloc's GetHeapSample API
 * (https://github.com/gperftools/gperftools/blob/49dbe4362b431629111b85929d91fe9a46c42295/src/gperftools/malloc_extension.h#L134)
 * and parses the profile in to a perf_data.proto.
 * The sampling period from the header entry and the event name is stored in
 * PerfFileAttr. The sample and memory map entries are stored as sample
 * and mmap events, respectively.
 */
class HeapProfileParser {
 public:
  HeapProfileParser(re2::StringPiece profile, u32 pid);

  // Parses the given heap profile. Returns true if the heap profile is parsed
  // successfully. Otherwise, returns false. Parse must be called only once.
  bool Parse();

  // Returns the perf_data.proto constructed from the heap profile.
  void GetProto(PerfDataProto* out) {
    out->CopyFrom(proto_);
    std::copy(mappings_.begin(), mappings_.end(),
              RepeatedPtrFieldBackInserter(out->mutable_events()));
    std::copy(samples_.begin(), samples_.end(),
              RepeatedPtrFieldBackInserter(out->mutable_events()));
    return;
  }

 private:
  // Parses the header entry, reads the metrics' total size and count, heapz
  // version, and sampling period. Adds two file attrs, one for inuse count and
  // another for inuse size.
  // Returns true on success. Returns false when the parsing fails, alloc
  // metrics are present in the heap profile, or the heapz version is
  // unsupported.
  bool ParseHeader();

  // Reads inuse count and size information from the header and sample entries.
  // Returns true on success. Otherwise, returns false.
  bool ParseCountAndSize(u64* inuse_count, u64* inuse_size);

  // Parses a sample entry and constructs two perf sample events, one with the
  // period as inuse count and another with the period as inuse size. The sample
  // ids of these events are mapped to the corresponding file attrs. Both the
  // events are populated with callchain entries from the sample entry's
  // callstack.
  // Returns true on success. Returns false when alloc metrics are present in
  // the sample entry, non-zero inuse size is present when the inuse count is
  // zero, or the perf sample event construction fails.
  bool ParseSample();

  // Parses a memory mapping entry, constructs a perf mmap event using the
  // address range, offset, and load module path from the memory mapping entry
  // if the execute permission bit of the entry is set.
  // Returns true on success. Returns false when the parsing fails or the perf
  // mmap event construction fails.
  bool ParseMemoryMapping();

  void ConsumeSpaceCommentOrNewLine();

  // Adds a Perf file attr to indicate the sample types stored in the Sample and
  // MMap events. In this case, it is IP, PID, TID, ID, PERIOD, CALLCHAIN.
  // IP - IP of the leaf function. This is needed to identify whether or not
  //      a sample can be mapped.
  // PID/TID - pid/tid is required to inform quipper to treat all the samples
  //           and mmaps as they are from the same process and thread.
  //           These are also needed to map a sample to a mmap and to get
  //           buildids.
  // ID - Required to map a sample event to a file_attr, which stores the
  //      event name, in this case it is heap inuse.
  // PERIOD - Stores the inuse count or inuse size.
  // CALLCHAIN - Required to store the callchain entries.
  void AddPerfFileAttr(u64 sample_id, const std::string& event_name);

  // Adds a perf event type with the name of the event and its MD5 prefix.
  void AddPerfEventType(u64 id, const std::string& event_name);

  void AddEventHeader(u32 type, u32 misc,
                      PerfDataProto_EventHeader* header_proto);

  // Adds a sample event to store a sample entry from the heap profile.
  void AddSampleEvent(u64 sample_id, u64 period, const std::vector<u64>& ips);

  // Adds a mmap event to store a memory map entry from the heap profile.
  void AddMmapEvent(u64 start, u64 len, u64 pgoff, const std::string& filename);

  PerfDataProto proto_;
  RepeatedPtrField<PerfDataProto_PerfEvent> samples_, mappings_;
  re2::StringPiece profile_;
  u64 sampling_period_;
  u32 pid_;
};

}  // namespace quipper

#endif  // PERF_DATA_CONVERTER_SRC_QUIPPER_HEAP_PROFILE_PARSER_H_
